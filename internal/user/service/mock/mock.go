// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -package=mock -destination=mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/firzatullahd/golang-template/internal/user/entity"
	model "github.com/firzatullahd/golang-template/internal/user/model"
	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockIrepository is a mock of Irepository interface.
type MockIrepository struct {
	ctrl     *gomock.Controller
	recorder *MockIrepositoryMockRecorder
}

// MockIrepositoryMockRecorder is the mock recorder for MockIrepository.
type MockIrepositoryMockRecorder struct {
	mock *MockIrepository
}

// NewMockIrepository creates a new mock instance.
func NewMockIrepository(ctrl *gomock.Controller) *MockIrepository {
	mock := &MockIrepository{ctrl: ctrl}
	mock.recorder = &MockIrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIrepository) EXPECT() *MockIrepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIrepository) CreateUser(ctx context.Context, tx *sqlx.Tx, in entity.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, tx, in)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIrepositoryMockRecorder) CreateUser(ctx, tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIrepository)(nil).CreateUser), ctx, tx, in)
}

// FindUser mocks base method.
func (m *MockIrepository) FindUser(ctx context.Context, filter *model.FilterFindUser) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, filter)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockIrepositoryMockRecorder) FindUser(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockIrepository)(nil).FindUser), ctx, filter)
}

// UpdateUser mocks base method.
func (m *MockIrepository) UpdateUser(ctx context.Context, tx *sqlx.Tx, filter *model.FilterFindUser, in map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, tx, filter, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIrepositoryMockRecorder) UpdateUser(ctx, tx, filter, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIrepository)(nil).UpdateUser), ctx, tx, filter, in)
}

// WithTransaction mocks base method.
func (m *MockIrepository) WithTransaction() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockIrepositoryMockRecorder) WithTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockIrepository)(nil).WithTransaction))
}

// MockIEmailClient is a mock of IEmailClient interface.
type MockIEmailClient struct {
	ctrl     *gomock.Controller
	recorder *MockIEmailClientMockRecorder
}

// MockIEmailClientMockRecorder is the mock recorder for MockIEmailClient.
type MockIEmailClientMockRecorder struct {
	mock *MockIEmailClient
}

// NewMockIEmailClient creates a new mock instance.
func NewMockIEmailClient(ctrl *gomock.Controller) *MockIEmailClient {
	mock := &MockIEmailClient{ctrl: ctrl}
	mock.recorder = &MockIEmailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEmailClient) EXPECT() *MockIEmailClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockIEmailClient) SendEmail(ctx context.Context, input model.EmailPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockIEmailClientMockRecorder) SendEmail(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockIEmailClient)(nil).SendEmail), ctx, input)
}
