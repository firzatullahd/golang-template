// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -package=mock -destination=mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/firzatullahd/golang-template/internal/user/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIservice is a mock of Iservice interface.
type MockIservice struct {
	ctrl     *gomock.Controller
	recorder *MockIserviceMockRecorder
}

// MockIserviceMockRecorder is the mock recorder for MockIservice.
type MockIserviceMockRecorder struct {
	mock *MockIservice
}

// NewMockIservice creates a new mock instance.
func NewMockIservice(ctrl *gomock.Controller) *MockIservice {
	mock := &MockIservice{ctrl: ctrl}
	mock.recorder = &MockIserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIservice) EXPECT() *MockIserviceMockRecorder {
	return m.recorder
}

// InitiateVerification mocks base method.
func (m *MockIservice) InitiateVerification(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateVerification", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitiateVerification indicates an expected call of InitiateVerification.
func (mr *MockIserviceMockRecorder) InitiateVerification(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateVerification", reflect.TypeOf((*MockIservice)(nil).InitiateVerification), ctx, username)
}

// Login mocks base method.
func (m *MockIservice) Login(ctx context.Context, in model.AuthRequest) (*model.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, in)
	ret0, _ := ret[0].(*model.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIserviceMockRecorder) Login(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIservice)(nil).Login), ctx, in)
}

// Register mocks base method.
func (m *MockIservice) Register(ctx context.Context, in model.RegisterRequest) (*model.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, in)
	ret0, _ := ret[0].(*model.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIserviceMockRecorder) Register(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIservice)(nil).Register), ctx, in)
}

// Verification mocks base method.
func (m *MockIservice) Verification(ctx context.Context, username, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verification", ctx, username, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verification indicates an expected call of Verification.
func (mr *MockIserviceMockRecorder) Verification(ctx, username, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verification", reflect.TypeOf((*MockIservice)(nil).Verification), ctx, username, code)
}
